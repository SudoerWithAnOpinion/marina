/**
 * Material / Filament model
 */

import {
  type Association,
  type CreationOptional,
  DataTypes,
  type InferAttributes,
  type InferCreationAttributes,
  Model,
  type NonAttribute,
  Sequelize
} from 'sequelize';
import MaterialUsage from './MaterialUsage';

export default class Material extends Model<
  InferAttributes<Material>,
  InferCreationAttributes<Material>
> {
  /**
   * The ID of the material (spool)
   * (Optional, auto-generated by database at INSERT)
   */
  declare materialId: CreationOptional<string>;

  /**
   * The manufacturer name
   */
  declare vendor: string;

  /**
   * Material type
   * @example PLA, ABS, PETG, HIPS, TPU
   */
  declare materialType: string;

  /**
   * Diameter of the material in milimeters
   * @default 1.75
   */
  declare materialDiameter: number;

  /**
   * The initial weight (in grams) of the spool (includes the spool frame itself)
   */
  declare initialWeight: number;

  /**
   * The material weight (in grams) of the spool
   */
  declare materialWeight: number;

  /**
   * The material color, stored as a hexademical string
   * @example '00aaff'
   */
  declare color: string;

  /**
   * The date the spool or box was opened
   * This should be used to determine when a spool was unsealed.
   */
  declare openedAt: Date | null;

  /**
   * The date this material was depleted and should no longer appear as an option for printing.
   * This can also indicate a partially used roll was discarded.
   */
  declare depletedAt: Date | null;

  /**
   * Last time this material has been renewed or dried
   */
  declare lastRenewalAt: Date | null;

  // Timestamps
  declare createdAt: CreationOptional<Date>;
  declare updatedAt: CreationOptional<Date>;

  // Virtuals
  /**
   * Indicates the state of the spool.
   */
  get state(): NonAttribute<string> {
    // TODO: WIP, does this work?
    const isOpen = (this.openedAt ?? null) !== null;
    const isDepleted = (this.depletedAt ?? null) !== null;

    if (!isOpen) return 'NEW';
    if (isOpen && !isDepleted) return 'IN_USE';
    return 'DEPLETED';
  }
  public static initialize(sequelize: Sequelize) {
    return this.init(
      {
        materialId: {
          type: DataTypes.UUID,
          primaryKey: true,
          defaultValue: DataTypes.UUIDV4
        },
        vendor: {
          type: DataTypes.STRING,
          allowNull: false
        },
        materialType: {
          type: DataTypes.STRING,
          allowNull: false
        },
        materialDiameter: {
          type: DataTypes.NUMBER,
          allowNull: false
        },
        initialWeight: {
          type: DataTypes.NUMBER,
          allowNull: true
        },
        materialWeight: {
          type: DataTypes.NUMBER,
          allowNull: false
        },
        color: {
          type: DataTypes.STRING(6),
          set: (input: string) => {
            const regex = /^[0-9a-f]{6}$/i;
            if (regex.test(input)) {
              return input.toLowerCase();
            } else {
              throw new Error('Invalid color format: Use a hexadecimal string (e.g. "00aaff")');
            }
          },
          validate: {
            is: /^[0-9a-f]{6}$/i
          }
        },
        openedAt: {
          type: DataTypes.DATE,
          allowNull: true
        },
        depletedAt: {
          type: DataTypes.DATE,
          allowNull: true
        },
        lastRenewalAt: {
          type: DataTypes.DATE,
          allowNull: true
        },
        createdAt: {
          type: DataTypes.DATE,
          allowNull: false,
          defaultValue: DataTypes.NOW
        },
        updatedAt: {
          type: DataTypes.DATE,
          allowNull: false,
          defaultValue: DataTypes.NOW
        }
      },
      {
        sequelize,
        tableName: 'materials',
        modelName: 'Material',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt'
      }
    );
  }

  // Associations
  declare materialUsage: NonAttribute<MaterialUsage>;

  static associations: {
    materialUsage: Association<Material, MaterialUsage>;
  };

  public static associate(): void {
    this.hasMany(MaterialUsage, {
      foreignKey: 'materialId',
      sourceKey: 'materialId',
      as: 'materialUsage',
      onDelete: 'RESTRICT',
      onUpdate: 'CASCADE'
    });
  }
}
